{"ts":1347873481321,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# You are given a list of \"employees\". Every element of this list is\n# a sublist that contains 2 elements. First element is the employee's\n# name. Second element is the employee's salary.\n\ndef raisesalary(employee):\n    return [employee[0], employee[1] * 1.3]\n\ndef underpaid(employee):\n    return employee[1] < 30.0\n\ndef sum(employee1, employee2):\n    return (employee1[1] + employee2[1])\n\nemployees = [['Alice', 20], ['Bob', 35], ['Carol', 25], ['John', 40]]\n\n# Use the built-in function \"filter\" to get the list of \"underpaid\"\n# employees that get less than $30 an hour. Also use the\n# \"underpaid\" function defined above.\n\nunderpaidEmployees = filter(underpaid, employees) # <- your code\n\n# Next, feed the data from underpaidEmployees to the function\n# 'raisesalary' that will add 30% to the salary of every such\n# employee. Use the built-in function 'map' for this part.\n\nincreasedEmployees =  map(raisesalary, underpaidEmployees)# <- your code\n\n# Next, calculate the hourly total before and after, i.e. for\n# the \"underpaidEmployees\" and for the \"increasedEmployees\".\n# Use the built-in function \"reduce\" and the \"sum\" function\n# provided for you.\n\nhourlyBefore =  reduce(sum, underpaidEmployees)# <- your code\nhourlyAfter =  reduce(sum, increasedEmployees)# <- your code\n\nprint 'Underpaid: ', underpaidEmployees\nprint 'Increased: ', increasedEmployees\nprint 'Before, per hour: ', hourlyBefore\nprint 'After, per hour: ', hourlyAfter\n"]],"start1":0,"start2":0,"length1":0,"length2":1437}]],"length":1437}
